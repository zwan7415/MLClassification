#import libraries
import pandas as pd
import numpy as np

#import plot libraries
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")
from sklearn.preprocessing import OneHotEncoder

#loading datasets
data1 = pd.red_csv('')
clients = pd.read_csv('clients.csv')
customer = pd.read_csv('customers.csv')
messages = pd.read_csv('messages.csv')

**File 1: clients dataset**

#file 1 inspection
print(clients.columns.is_unique)
print(clients.shape)
print(clients[clients.duplicated()== True])
clients.info()

#change column name,prepare for datasets join
clients = clients.rename(
    columns = {'id':'client_id'})
clients.describe()

Key insight: 

--no missing values in the dataset
--all object features
--all columns are unique, no duplicate rows identified

clients.head()

**File 2 : customer dataset**

#File 2 inspection
print(customer.columns.is_unique)
print(customer.shape)
print(customer[customer.duplicated()==True])
customer.info()

customer.describe()

Key insight:  

-- missing values in the 'gender','country','age'
--all object features but 'age'
--all columns are unique, no duplicate rows identified

customer.head()

#join file 1&2 on key 'client_id'
client_customer = pd.merge(customer,clients,left_on=['client_id'], right_on=['client_id'], how = 'left')

#change column name,prepare for next stage of datasets join
client_customer = client_customer.rename(
    columns = {'country_x':'country_customer','country_y':'country_client','name':'client_name','id':'customer_id'})
client_customer.head()

**File 3: messages dataset**

# File 3 inspection
print(messages.columns.is_unique)
print(messages.shape)
print(messages[messages.duplicated()==True])
messages.info()

messages.describe()

Key insight:    
-- no missing values in the dataset
--all object features but 'clicked','converted'
-- 'clicked' and 'converted' values between 1 and 0
-- 'converted' mean lower than 'clicked'
--all columns are unique, no duplicate rows identified

messages.head()

#final join table with messages dataset, on key customer_id
df = pd.merge(messages,client_customer,left_on=['customer_id'], right_on=['customer_id'], how = 'left')

print(df.columns.is_unique)
print(df.shape)
print(df[df.duplicated()==True])
df.info()

df.describe()

Key insight:    
-- missing values in the dataset, 'gender', 'country_customer', 'age'
-- all object features but 'clicked','converted','age'
-- 'clicked' and 'converted' values between 1 and 0
-- 'converted' mean lower than 'clicked'
--all columns are unique, no duplicate rows identified
-- 'clicked','converted','age columns have diffrent scale range

df=df.drop(columns=['customer_id','id','client_id','created_at'])

df.info()

#fix missing values
#fill NaN in 'country_customer' column with 'country_client' value
df['country_customer']=df['country_customer'].fillna(df['country_client'])

**Find correlation between 'converted' and age/gender**

# box plot visualization about the distrubution of customer' gender vs age
sns.set_theme(style='whitegrid')
fig,ax = plt.subplots(figsize=(6,5))
ax.set_title('Customer age by gender')
sns.boxplot(data=df,x='gender',y='age',palette='Spectral',width=.5)

The boxplot shows the customer age per gender group over a 10 months period. 
In female group, the median of age was about 38 years old, which is the lower than male group. 12 years lower than the median age of male borrowers. 
The upper quartile age in female group was about 50, a lower of 13.7%, compared to male group age (58 years old).

#ralted to gender and age?
# box plot visualization about the distrubution of customer' gender vs age
age_count= sns.catplot(x='age', y='gender', kind='violin',hue = 'converted',palette='Spectral', data=df)

# add label and title
age_count.set(xlabel = 'customer age', ylabel = 'gender',title = 'Coration between customer age and gender')

#calculate median age for female and male
df.groupby('gender', as_index=False).converted.sum()

Key insight:    

-- outliers observed

Among the customers who do not choose Indebted products,middle-aged men are more than women, concentrated in about 50 years old.
The customers who choose Indebted products are mainly young people, aged 23-30 years old. In the lower age group, male customers outnumber female customers.
Therefore, there is a strong link between customer gender, age and conversion rates.

violin figure shows the the customer age per gender group over a 10 months period.Among the customers who do not choose Indebted products,middle-aged men are more than women, concentrated in about 50 years old. 11 years older than the median age of female customers.The upper quartile age in male group who do not choose Indebted products was about 58, a older of 16%, compared to female group age (50 years old).

The customers who choose Indebted products are mainly young people, aged 28-30 years old. In the both of gender groups, male customers slightly outnumber female customers.

Therefor a strong link between customer gender, age and conversion rates.

**Find correlation between 'converted' and region,client,product type**

#ralted to region?
# plot and count number of customer in each country 
country_count= sns.catplot(x='country_customer', kind='count',hue = 'converted',palette='Spectral', data=df)

# add label and title
country_count.set(xlabel = 'country', ylabel = 'Number of customer',title = 'Number of Customer in Each Country')

#calculate sum of converted for each country

df.groupby('country_customer', as_index=False).converted.sum()

The UK has the most customers (66,000), but not the highest conversion value (1291), whereas CA has the most conversion value (1413) and the lowest number of customers (33,000). New Zealand's conversion value is at least 438.

This observation may be due to customers in the UK and New Zealand having other debt options, or having questions about the product, or having different spending/repayment habits.

Therefore, the correlation between the customer location and the target conversion rate may be low, and the country_client feature may have a similar situation.

#ralted to client?
# plot and count number of customer in each client

client_count= sns.catplot(x='client_name', kind='count',hue = 'converted',palette='Spectral', data=df, aspect =2)

# add label and title
client_count.set(xlabel = 'client_name', ylabel = 'Number of service demand by client',title = 'Number of Service Demand in Each Client')

#calculate sum of converted for each client

df.groupby('client_name', as_index=False).converted.sum()

The SwanPay has the most service demand(35,000),it has the highest conversion value (1181), whereas Moose Money has the second most conversion value (861) but the low service demand (11,000). Skink Solar's conversion value is at least 59. Eagle Energy had the least service demand 7,500.

Therefore, the correlation between the service demand and the target conversion rate may be low.

#ralte to product type?
# plot and count number of customer in each product type

client_count= sns.catplot(x='product_type', kind='count',hue = 'converted',palette='Spectral', data=df)

# add label and title
client_count.set(xlabel = 'product_type', ylabel = 'Number of service demand by product type',title = 'Number of Service Demand in Each Product')


#calculate sum of converted for each client

df.groupby('product_type', as_index=False).converted.sum()

The BNPL has the most service demand(66,000),it has the highest conversion value (2415), whereas Credit Card has the second most service demand 40,000, conversion value (861), but it has a similar conversion value to energy, 344 and 383, respectively. Energy had the least service demand 34,000.

Therefore, the correlation between the prodouct type and the target conversion rate may be intermediate.

#fill missing values
#fill NaN in 'age' column with median values
#groupby remove rows where gender is NaN 
df = df.groupby(['gender'], group_keys=False).apply(lambda x: x.fillna(x.median()))
df.head()

df.info()

Key insight:   

no missing values in the dataset
all object features but 'service_clicked','converted','age'
'clicked' and 'converted' values between 1 and 0
'converted' mean lower than 'clicked'
all columns are unique, no duplicate rows identified

'clicked','converted','age columns have diffrent scale range

'age','gender','service_clicked' and ' product type' have strong to medium association with target

#one hot coding, add features
encoder = OneHotEncoder(sparse =False)
encode_cols= ['gender', 'product_type']

df_encoded = pd.DataFrame(encoder.fit_transform(df[encode_cols]))
df_encoded.columns = encoder.get_feature_names(encode_cols)

# Replace Categotical Data with Encoded Data
df = df.drop(encode_cols,axis = 1)
df = df.reset_index(drop=True)
df = pd.concat([df_encoded, df], axis = 1)

print('Shape of dataframe:', df.shape)
df.info()

#drop none use featuers
df = df.drop(['country_customer','client_name','country_client'],axis = 1)
df = df.reset_index(drop=True)

#set email set at as index , prepare add feature, split train set and test set
df= df.set_index('sent_at')
df.index=pd.to_datetime(df.index)
df.head()

#count target values
df['converted'].value_counts()

**add more features**

feature creation: creat time series features based on time series index.

add: hour, day of week and day of year features

#add more features
#feature creation: creat time series features based on time series index.

#day_mapping = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}
def creat_features(df):
    df['hour']=df.index.hour
    df['dayofweek']=df.index.day_of_week#.map(day_mapping)
    #df['quarter'] = df.index.quarter
    #df['month']=df.index.month
    #df['year']=df.index.year
    df['dayofyear']=df.index.dayofyear
    #df['isweekend'] = np.where((df['dayofweek'] == 5) | (df['dayofweek'] == 6), 1, 0)
    return df

df = creat_features(df)

#ralte to hour?
# plot and count number of customer in hour

hr_count= sns.catplot(x='hour', kind='count',hue = 'converted',palette='Spectral', data=df)

# add label and title
hr_count.set(xlabel = 'Hour/Day', ylabel = 'Number of service Email sent out by hour',title = 'Number of Service Email Sent Out in Hour')

df.groupby('hour', as_index=False).converted.sum()

Between 9am and 11am is the peak time for mail delivery,and these times have higher conversion rates of 545,577 and 527 respectively. While 18 pm and 19pm are the lowest period of Email delivery, these times are also low conversion rates of 78,88.

Therefore,the correlation between Email send out time and conversion rate may be relatively high.

#ralte to day of week?
# plot and count number of customer in day of week
# 0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday'

week_count= sns.catplot(x='dayofweek', kind='count',hue = 'converted',palette='Spectral', data=df)

# add label and title
week_count.set(xlabel = 'Day of Week', ylabel = 'Number of service Email sent out by day',title = 'Number of Service Email Sent Out in Day of Week')

df.groupby('dayofweek', as_index=False).converted.sum()
plit(show)

The number of Emails sent out from Tuesday to Friday is almost about 25,000, and on Monday it is only about 10,000. The conversion values from Tuesday to Friday were similar too at 601,571,625 and 527 respectively. Monday's conversion value was 267.But thursday's conversion rate was 2.5%, which was close to monday's conversion rate of 2.7%, about 0.2% lower.

Therefore,the conversion rate may have a strong relationship with the total number of emails sent out. Choose to send emails on weekdays to get higher click-through rates and conversion rates.
